- Front/Back - CW big ESC and newest fix (left and right of reset button)
- Left/Right - CCW

- Right ESC - Yellow, Black Red,  from above view
	    - Red, Black, Yellow,  from below view 

- Left ESC - Yellow, Black Red,  from above view
	    - Red, Black, Yellow,  from below view


- 3, 4, 5, 7 are working all on \portd3,4,5,7 

- ESC with highest starting PWM starts at 1220

- But to give some allowance we chose 1230 

- We can power the arduino VCC and 3.3V regulator from the ESC BEC

- There is a mysterious ground connection for the original RAW pin usage

- Non - intrusive soldering procedure:
      	- Left Xbee header
	- Arduino pins
	- IMU header
	- Right Xbee header 

>>>>	Wire to Soft I2C mapping
	- In setup Wire uses begin() for initialization of TWI and sets pins for SDA and SCL

Wire methods


- begin()
- available() - N/A
- requestFrom(address, count) - requestFrom()
- receive() - read()
- beginTransmission(address)
- send(byte) - write
- endTransmission()



- GYR_ADDRESS for L3GD20H is (0xD6 >> 1) or 01101011b or 0x6B
- For setting the gyro, use 0x4F or 01001111b
- ACC_ADDRESS for LSM303D is (0x3A >> 1) or 00011101b or 0x1D 
- For setting the acc, use 0x57 or 01010111b

for SDA, SCL
- use pins 10 an A3, respectively??? Iono meihn.! It doesn't matter. Just choose in any order. Feel free to permutate.

When calling writeGyroReg and writeAccReg use the following to initialize the registers. 
- writeGyroReg(L3G4200D_CTRL_REG1, 0x4F); //Same as original code. 
  writeAccReg(LSM303_CTRL_REG1_A, 0b01010111);  //Was 0x27 in original. Now 0x57 or 0b01010111

- Check the datasheets to understand what the values used above are doing. Also check "IMU_SoftI2C_Test" for example usage

- I have included the two I2C libraries we checked in the I2C_Liraries Folder. 
- In "IMU_SoftI2C_Test" I am currently using "SoftI2CMaster-master - todbot" to test. 
- You may also try "SoftI2CMaster-master - Assembler" to ensure that the IMU readings are consistent

- I have written imu.h, our  own version of minimu9.h in the original code, which contains constants for the GRY and ACC

- As an aside, I think instead of creating new arduino files, when trying to make major changes(in order not to break things), I think 
  its better to take advantage of git and just commit changes so we can have a log of our progress.



Xbee shenanigans
- Xbee with SL 40BED067 appears not to receive 
- When programming arduino, do not have Xbee plugged in.
- Baud rate of 9600 is working right now, but try 57600 and document results. 

Independent control of motors
- Took first step toward implementing independent control of the four motors using the Servo class included with arduino. Methods of interest:
  * Servo.attach(pin) 
  * Servo.write(value)

Pad things
- Axis index 0 is -1 to 0 to +1 (i.e get_axis(0) is left analog left(-1) to right(+1))
- Axis index 1 is -1 to 0 to +1 (i.e get_axis(1) is left analog up(-1) to down(+1))
- Axis index 2 is -1 to 0 to +1 (i.e get_axis(2) is right analog left(-1) to right(+1))
- Axis index 3 is -1 to 0 to +1 (i.e get_axis(3) is right analog up(-1) to down(+1))

- It appears indices 2 and 3 have better finetune when moving the analog stick


Latest findings (IMU axes, loop time (DT), Apparent motor speed limit and Servo REFRESH_INTERVAL)

**IMU axes
 I confirmed that in our current orientation, the IMU axes correspond to our motor-esc arrangements as follows
 - X axis to escs on arduino pins 5(+) and 4(-)
 - Y axis to escs on arduino pins 3(+) and 7(-)

**Loop time
 I tested measuring loop time using arduinos millis() and it's sufficient, however I hope to use a constant in the final version.

**Apparent motor speed limits
 In search for what our max speed should be in code, I ran a test on the motors and found that beyond a pulse width of 1900us the speeds don't
 increase anymore. I was testing with increments on 100 starting from 1500. I noticed after 1900, 2000 has the same speed. On the lower end the 
 smaller ESCs can still run at 1200 but the biggest one only starts reliably at 1300. I am thinking we limit the speed band to 1350 - 1850.

**Servo REFRESH_INTERVAL
 First of all, I discovered yesterday that the servo signals aren't actually PWM(duty cycle versus cycle period) but PDM/PPM(dependent on the duration
 of the pulse itself, not in relation to the cycle period). Arduino's Servo library sets the REFRESH_INTERVAL to 20000(20ms/50Hz) and min and max pulse
 width to 540 and 2400 us respectively by default. I am trying to play around with the refresh interval because I have seen all around that 50Hz is quite
 slow for stability of a quad and to capture transient commands. 